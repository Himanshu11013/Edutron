import json
from .utils import generate_questions
from django.contrib.auth.decorators import login_required
from django.utils.timezone import now
from django.contrib.auth.models import User
import traceback
from django.views.decorators.csrf import csrf_exempt
from backend.settings import db
from django.http import JsonResponse
from google.cloud import firestore
 



@csrf_exempt
def create_quiz(request):
    """Create a new quiz with questions generated by AI"""
    print("Quiz creation endpoint called")
    
    if request.method != "POST":
        return JsonResponse({"error": "Only POST method is supported"}, status=405)
    
    try:
        request_body = request.body.decode('utf-8')
        print(f"Raw request body: {request_body[:200]}")  # Debug first 200 chars
        
        if not request_body.strip():
            return JsonResponse({"error": "Empty request body"}, status=400)
        
        # Parse JSON data
        try:
            data = json.loads(request_body)
        except json.JSONDecodeError as e:
            print(f"JSON parsing error: {e}")
            return JsonResponse({"error": f"Invalid JSON in request: {str(e)}"}, status=400)
        
        print(f"Parsed request data: {data}")
        
        # Extract required fields
        topic = data.get("topic")
        numQuestions = data.get("numQuestions")
        difficulty = data.get("difficulty")
        timeLimit = data.get("timeLimit")
        userId = data.get("userId")
        
        # Validate required fields
        if not all([topic, numQuestions, difficulty, timeLimit, userId]):
            return JsonResponse({"error": "All fields (topic, numQuestions, difficulty, timeLimit, userId) are required"}, status=400)
        
        # Generate questions
        questions_markdown = generate_questions(topic, numQuestions, difficulty)
        
        # Validate questions
        if not questions_markdown:
            return JsonResponse({"error": "Failed to generate quiz questions"}, status=500)
        if len(questions_markdown) == 0:
            return JsonResponse({"error": "Cannot create practice questions!"}, status=500)

        # Try to parse questions from the response
        try:
            # The generate_questions function already returns JSON string, so parse it directly
            questions = json.loads(questions_markdown)
        except json.JSONDecodeError as parse_err:
            print(f"Error parsing JSON from response: {parse_err}")
            return JsonResponse({"error": f"Failed to parse questions from response: {str(parse_err)}"}, status=500)

        print(f"Parsed questions: {questions}")
        if not isinstance(questions, list):
            return JsonResponse({"error": "Parsed questions is not a list"}, status=500)
        if len(questions) == 0:
            return JsonResponse({"error": "No questions generated by Gemini"}, status=500)

        # Return the generated questions to the frontend
        quiz_data = {
            "userId": userId,
            "topic": topic,
            "numQuestions": numQuestions,
            "difficulty": difficulty,
            "timeLimit": timeLimit,
            "questions": questions
        }
        try:
            return JsonResponse({
                "data": quiz_data,
                "message": "Quiz questions generated successfully"
            }, status=200)
        except Exception as resp_err:
            print(f"Error serializing response: {resp_err}")
            return JsonResponse({"error": f"Failed to serialize response: {str(resp_err)}"}, status=500)
            
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)
